---
title: "Hands-on Exercise 4.2: Visual Statistical Analysis"
date: "January 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  warning: false
---

## Visual Statistical Analysis with ggstatsplot

[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [ggplot2](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

-   To provide alternative statistical inference methods by default.

-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.illinoisstate.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:

### Install and loading R packages.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### Importing the data

```{r}
exam <- read_csv("../../data/Exam_data.csv")
```

### One-sample test: gghistostats() method

In the code chunk below, [gghistostats()](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

### Two-sample mean test: ggbetweenstats()

In the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

### Oneway ANOVA Test: ggbetweenstats() method

In the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.

-   "ns" → only non-significant

-   "s" → only significant

-   "all" → everything

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

### Significant Test of Correlation: ggscatterstats()

In the code chunk below, [ggscatterstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

### Significant Test of Association (Depedence) : ggbarstats() methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using [cut()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

## Visualising Models

Learning how to visualise model diagnostic and model parameters by using parameters package.

-   Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

### Installing and loading the required libraries

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

### Importing Excel file: readxl methods

In the code chunk below, [read_xls()](https://readxl.tidyverse.org/reference/read_excel.html) of [readxl](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

car_resale <- read_xls("../../data/ToyotaCorolla.xls", 
                       "data")
```

### Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Model Diagnostic: checking for multicolinearity

In the code chunk, [check_collinearity()](https://easystats.github.io/performance/reference/check_collinearity.html) of [performance](https://easystats.github.io/performance/) package.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

check_collinearity(model)
```

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

check_c <- check_collinearity(model)
plot(check_c)
```

### Model Diagnostic: checking normality assumption

In the code chunk, [check_normality()](https://easystats.github.io/performance/reference/check_normality.html) of [performance](https://easystats.github.io/performance/) package.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

### Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [check_heteroscedasticity()](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [performance](https://easystats.github.io/performance/) package.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

### Model Diagnostic: Complete check

We can also perform the complete by using [check_model()](https://easystats.github.io/performance/reference/check_model.html).

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

check_model(model1)
```

### Visualising Regression Parameters: see methods

In the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

plot(parameters(model1))
```

### Visualising Regression Parameters: ggcoefstats() methods

In the code below, [ggcoefstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggcoefstats(model1, 
            output = "plot")
```
