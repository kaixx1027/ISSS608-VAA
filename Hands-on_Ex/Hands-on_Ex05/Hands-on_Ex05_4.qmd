---
title: "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot"
date: "February 2, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  warning: false
---

## Getting Started

### Install and loading R packages.

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

### Importing the data

```{r}
wh <- read_csv("../../data/WHData-2018.csv")
```

## Plotting Static Parallel Coordinates Plot

### Plotting a simple parallel coordinates

```{r}
ggparcoord(data = wh, 
           columns = c(7:12))

```

Notice that only two argument namely `data` and `columns` is used. `Data` argument is used to map the data object (i.e. `wh`) and `columns` is used to select the columns for preparing the parallel coordinates plot.

### Plotting a parallel coordinates with boxplot

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```

Things to learn from the code chunk above.

-   `groupColumn` argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.

-   `scale` argument is used to scale the variables in the parallel coordinate plot by using `uniminmax` method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.

-   `alphaLines` argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.

-   `boxplot` argument is used to turn on the boxplot by using logical `TRUE`. The default is `FALSE`.

-   `title` argument is used to provide the parallel coordinates plot a title.

### Parallel coordinates with facet

Since `ggparcoord()` is developed by extending ***ggplot2*** package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.

In the code chunk below, `facet_wrap()` of ***ggplot2*** is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region)
```

One of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.

### Rotating x-axis text label

To make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using `theme()` function in ggplot2 as shown in the code chunk below

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30))
```

Thing to learn from the code chunk above:

-   To rotate x-axis text labels, we use `axis.text.x` as argument to `theme()` function. And we specify `element_text(angle = 30)` to rotate the x-axis text by an angle 30 degree.

### Adjusting the rotated x-axis text label

Rotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using `hjust` argument to theme’s text element with `element_text()`. We use `axis.text.x` as we want to change the look of x-axis text.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30, hjust=1))
```

## Plotting Interactive Parallel Coordinates Plot: parallelPlot methods

[parallelPlot](https://cran.r-project.org/web/packages/parallelPlot/) is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and [d3.js](https://d3js.org/). In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.

### The basic plot

The code chunk below plot an interactive parallel coordinates plot by using `parallelPlot()`.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

Notice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.

### Rotate axis label

In the code chunk below, `rotateTitle` argument is used to avoid overlapping axis labels.

One of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

parallelPlot(wh,
             rotateTitle = TRUE)
```

### Changing the colour scheme

We can change the default blue colour scheme by using `continousCS` argument as shown in the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

### Parallel coordinates plot with histogram

In the code chunk below, `histoVisibility` argument is used to plot histogram along the axis of each variables.

```{r}
#| code-fold: true
#| code-summary: "Click to view the code."

histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

