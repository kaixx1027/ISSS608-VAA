[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "Despite claims of educational excellence in Singapore, skepticism persists, particularly regarding disparities in elite and neighborhood schools and socioeconomic factors. Leveraging 2022 PISA data, this project aims for a succinct Exploratory Data Analysis (EDA) using ggplot2 to reveal performance distribution and explore relationships with schools, gender, and socioeconomic status.\n\n\nDistribution Analysis: Use EDA methods and ggplot2 to visualize math, reading, and science performance distribution; Provide insights into score spread, addressing disparities.\nRelationship Exploration: Investigate academic performance relationships with school types using concise boxplots; Analyze gender-based differences with brief boxplots; Examine socioeconomic impact on academic outcomes, identifying correlations using boxplots.\nLimitations and Focus: Utilize up to five EDA visualizations for clarity; Deliver actionable insights for policymakers based on identified patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "Despite claims of educational excellence in Singapore, skepticism persists, particularly regarding disparities in elite and neighborhood schools and socioeconomic factors. Leveraging 2022 PISA data, this project aims for a succinct Exploratory Data Analysis (EDA) using ggplot2 to reveal performance distribution and explore relationships with schools, gender, and socioeconomic status.\n\n\nDistribution Analysis: Use EDA methods and ggplot2 to visualize math, reading, and science performance distribution; Provide insights into score spread, addressing disparities.\nRelationship Exploration: Investigate academic performance relationships with school types using concise boxplots; Analyze gender-based differences with brief boxplots; Examine socioeconomic impact on academic outcomes, identifying correlations using boxplots.\nLimitations and Focus: Utilize up to five EDA visualizations for clarity; Deliver actionable insights for policymakers based on identified patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "\n2 Data Preparation",
    "text": "2 Data Preparation\n\n2.1 Loading R packages\nThe code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nhaven: an R package designed for reading and writing datasets from software like SAS, SPSS, and Stata, into R.\ngridExtra: an R package that extends the grid graphics system.\nggplot2: a widely used R package for creating elegant and informative graphics using the Grammar of Graphics framework.\nplotly: an R package for interactive, web-based charts and dashboards, extending ggplot2 capabilities.\nggridges: an R package extending ggplot2 for concise and effective ridge plots.\n\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse, haven, gridExtra, ggplot2, plotly, ggridges)\n\n\n2.2 Dataset\nOne dataset (Student questionnaire data file) from PISA is provided for the task.\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\n\n\n2.2.1 Data Filtering and Transformation\n\nFilter SGP students record\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nCreate new dataset including student’ performance in mathematics, reading, and science and relevant record of their schools, gender and socioeconomic status\n\n\n\nClick to view the code.mathematics &lt;- stu_qqq_SG[, c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")]\n\nreading &lt;- stu_qqq_SG[, c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")]\n\nscience &lt;- stu_qqq_SG[, c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")]\n\nschool &lt;- stu_qqq_SG[, c(\"CNTSCHID\")]\n\ngender &lt;- stu_qqq_SG[, c(\"ST004D01T\")]\n\nschool_education &lt;- stu_qqq_SG[, grep(\"ST005|ST007\", names(stu_qqq_SG), value = TRUE)]\n\nvocational_training &lt;- stu_qqq_SG[, grep(\"ST006|ST008\", names(stu_qqq_SG), value = TRUE)]\n\nhome_possessions &lt;- stu_qqq_SG[, grep(\"ST250|ST251|ST253|ST254|ST255|ST256\", names(stu_qqq_SG), value = TRUE)]\n\n\n\n2.2.2 Data Wrangling\n\n2.2.2.1 Calculate the mean and median for maths, reading, and science\nFor mean values, use the rowMeans function to calculate the average score for each student.\nFor median values, use the apply function to compute the median along rows (students).\nThen calculate the total sum of the average and the median scores for the three subjects for each student.\n\nClick to view the code.# Calculate mean values\nAvg_Math &lt;- rowMeans(mathematics, na.rm = TRUE)\nAvg_Reading &lt;- rowMeans(reading, na.rm = TRUE)\nAvg_Science &lt;- rowMeans(science, na.rm = TRUE)\n# Calculate total sum of mean\nTotal_Avg &lt;- rowSums(cbind(avg_math, avg_reading, avg_science), na.rm = TRUE)\n\n# Calculate median values\nMedian_Math &lt;- apply(mathematics, 1, median, na.rm = TRUE)\nMedian_Reading &lt;- apply(reading, 1, median, na.rm = TRUE)\nMedian_Science &lt;- apply(science, 1, median, na.rm = TRUE)\n# Calculate total sum of mean\nTotal_Median &lt;- rowSums(cbind(median_math, median_reading, median_science), na.rm = TRUE)\n\n\n\n2.2.2.2 Merge into a new table and save\n\nClick to view the code.# Create a new data frame\ncombined &lt;- cbind(stu_qqq_SG[\"CNTSTUID\"], Avg_Math, Avg_Reading, Avg_Science, Total_Avg, Median_Math, Median_Reading, Median_Science, Total_Median, school, gender, school_education, vocational_training, home_possessions)\n\ncolnames(combined)[colnames(combined) == \"CNTSCHID\"] &lt;- \"School\"\n\ncolnames(combined)[colnames(combined) == \"ST004D01T\"] &lt;- \"Gender\"\n\nwrite_rds(combined,\n          \"data/combined.rds\")\n\n\nRead the combined data and check for missing values\n\nClick to view the code.combined &lt;- read_rds(\"data/combined.rds\")\nhead(combined)\n\n\n\n  \n\n\nClick to view the code.any(is.na(combined))\n\n[1] TRUE\n\n\nAssigning names to variables\n\nClick to view the code.School &lt;- combined$School\n\nGender &lt;- combined$Gender\n\nschool_education &lt;- combined[, grep(\"ST005|ST007\", names(combined), value = TRUE)]\n\nvocational_training &lt;- combined[, grep(\"ST006|ST008\", names(combined), value = TRUE)]\n\nhome_possessions &lt;- combined[, grep(\"ST250|ST251|ST253|ST254|ST255|ST256\", names(combined), value = TRUE)]\n\n\n\n2.2.2.3 Calculate the socioeconomic status\n\nUse the rowSums function to calculate the sum of index of school education and vocational training for each students’ parents.\n\nClick to view the code.# Calculate sum values\nsum_school_education &lt;- rowSums(school_education, na.rm = TRUE)\nsum_vocational_training &lt;- rowSums(vocational_training, na.rm = TRUE)\n\n# Calculate sum of home possessions\nhome_possessions &lt;- home_possessions %&gt;%\n  mutate(sum_home_possessions = rowSums(select(., starts_with(\"ST251Q\"), -matches(\"ST251Q05JA|ST251Q08JA\")), na.rm = TRUE))\nsum_home_possessions &lt;- home_possessions$sum_home_possessions\n\n\nThen sum these aggregated values to calculate socioeconomic status for each student.\nCombining scores from school education, vocational training, and home possessions to calculate a person’s overall socioeconomic status makes sense because socioeconomic status is complex and includes things like education, job skills, and how much someone owns. This method creates a single score that shows a person’s level of education, job abilities, and quality of living, all of which are important parts of their financial and social status.\nSummation is straightforward and the results are easier to interpret. It can also handle zero values and matain scale consistency.\n\nsocioeconomic_status &lt;- rowSums(cbind(sum_school_education, sum_vocational_training, sum_home_possessions), na.rm = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratary-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratary-data-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "\n3 Exploratary Data Analysis",
    "text": "3 Exploratary Data Analysis\n\n3.1 Histograms for Distribution of Scores in Each Subject\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Calculate the median and mean outside of the ggplot2 aes function\nmedian_Avg_Math &lt;- median(combined$Avg_Math, na.rm = TRUE)\nmean_Avg_Math &lt;- mean(combined$Avg_Math, na.rm = TRUE)\n\nmedian_Avg_Reading &lt;- median(combined$Avg_Reading, na.rm = TRUE)\nmean_Avg_Reading &lt;- mean(combined$Avg_Reading, na.rm = TRUE)\n\nmedian_Avg_Science &lt;- median(combined$Avg_Science, na.rm = TRUE)\nmean_Avg_Science &lt;- mean(combined$Avg_Science, na.rm = TRUE)\n\n# Histogram for Avg_Math\np1 &lt;- ggplot(combined, aes(x = Avg_Math)) +\n  geom_histogram(bins = 20, fill = \"lightblue\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Math, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Math, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Math, y = Inf, label = paste(\"Median:\", round(median_Avg_Math, 2)), vjust = 2, hjust = -1.1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Math, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Math, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Math Scores\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\np2 &lt;- ggplot(combined, aes(x = Avg_Reading)) +\n  geom_histogram(bins = 20, fill = \"lightgreen\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Reading, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Reading, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Reading, y = Inf, label = paste(\"Median:\", round(median_Avg_Reading, 2)), vjust = 2, hjust = -1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Reading, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Reading, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Reading Scores\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\np3 &lt;- ggplot(combined, aes(x = Avg_Science)) +\n  geom_histogram(bins = 20, fill = \"lightcoral\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Science, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Science, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Science, y = Inf, label = paste(\"Median:\", round(median_Avg_Science, 2)), vjust = 2, hjust = -1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Science, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Science, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Science Scores\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, \n             aes(x = Avg_Math)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, \n             aes(x = Avg_Reading)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Reading scores\") \n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, \n             aes(x = Avg_Science)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Science scores\") \n\n\n\n\n\n\n\n\nDistributions for math, reading, and science are bit left-skewed. This may due to that the assessments is challenging and more students are scoring towards the lower end.\nThe closeness of means to median indicates that while distributions are skewed, extreme low scores are not predominant.\nScore distributions are centrally peaked around 500-600. This indicates a standard performance level of the population.\n\nWe can further study the relationship between scores and some family economic status, gender, or schools.\n\n3.2 Performance Comparison by Gender\n‘1’ represents girls and ‘2’ represents boys in the ‘Gender’ column\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.combined$Gender &lt;- factor(Gender, levels = c(1, 2), labels = c(\"Girl\", \"Boy\"))\n\n# Density plot for Mathematics\np1 &lt;- ggplot(combined, aes(x = Avg_Math, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Math Scores by Gender\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Density plot for Reading\np2 &lt;- ggplot(combined, aes(x = Avg_Reading, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Reading Scores by Gender\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Density plot for Science\np3 &lt;- ggplot(combined, aes(x = Avg_Science, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Science Scores by Gender\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Combining the plots into one image for easy comparison\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Math, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Math Scores by Gender\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Reading, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Reading Scores by Gender\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Science, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Science Scores by Gender\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\n\nIn math and science, the peak of the boys’ density curve is slightly to the right of the girls’. This indicates that boys tend to have higher average scores in math and science.\nFor reading, the peak of the girls’ density curve is to the right of the boys’. This means that girls have better performance in reading compared with boys.\nHowever, the curves overlap significantly across all subjects. This shows that the difference in gender is not so significant as expected.\n\nThe discovery conform to peoples common sense, although the difference in gender is not so large.\n\n3.3 Performance Comparison by School\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Scatter plot for Avg Math Score vs School ID\np1 &lt;- ggplot(combined, aes(x = School, y = Avg_Math)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Math Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Math Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Scatter plot for Avg Reading Score vs School ID\np2 &lt;- ggplot(combined, aes(x = School, y = Avg_Reading)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Reading Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Reading Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Scatter plot for Avg Science Score vs School ID\np3 &lt;- ggplot(combined, aes(x = School, y = Avg_Science)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Science Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Science Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Plotting all three scatter plots in a grid for comparison\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Math)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Math Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Math Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Reading)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Reading Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Reading Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Science)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Science Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Science Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe first set of scatter plots shows a wide distribution of average scores across schools, with no clear pattern based on school ID.\n\n\n\nPairwise Comparison\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Compute the average of average scores for each school\nschool_avg_scores &lt;- combined %&gt;%\n  group_by(School) %&gt;%\n  summarise(\n    Avg_Math_Score = mean(Avg_Math, na.rm = TRUE),\n    Avg_Reading_Score = mean(Avg_Reading, na.rm = TRUE),\n    Avg_Science_Score = mean(Avg_Science, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Scatter plot for Average Math vs. Average Reading Scores for each School\np_math_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Math vs. Reading\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Math vs. Average Science Scores for each School\np_math_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Math vs. Science\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Math Scores for each School\np_reading_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), color = \"coral\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Reading vs. Math\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Science Scores for each School\np_reading_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), color = \"coral\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Reading vs. Science\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Math Scores for each School\np_science_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), color = \"firebrick\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Science vs. Math\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Reading Scores for each School\np_science_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), color = \"firebrick\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Science vs. Reading\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_math_reading, p_reading_math, p_science_math, p_math_science, p_reading_science, p_science_reading, ncol = 3, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Math vs. Average Reading Scores for each school\np_math_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Math vs. Average Reading Scores by School\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Math vs. Average Science Scores for each School\np_math_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Math vs. Average Science Scores by School\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_math_reading, p_math_science, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Reading vs. Average Math Scores for each School\np_reading_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Reading vs. Average Math Scores by School\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Science Scores for each School\np_reading_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Reading vs. Average Science Scores by School\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_reading_math, p_reading_science, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Science vs. Average Math Scores for each School\np_science_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Science vs. Average Math Scores by School\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Reading Scores for each School\np_science_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Science vs. Average Reading Scores by School\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_science_math, p_science_reading, nrow = 2)\n\n\n\n\n\n\n\n\nThe second set of plots fixes School ID and try to compare scores of different subjects within each School. These plots reveal a strong positive correlation between average scores across all subjects, indicating that Schools with high performance in one subject tend to perform well in others too.\n\nThis suggests that factors influencing School performance may be systemic rather than subject specific. Schools with higher performance on a specific subject also performs well on other subjects.\n\n3.4 Performance Comparison by Socioeconomic Status\nConstructing pairwise heatmap plots for home possessions, education level, and vocational training level, vesus the total average score.\n\n\nSchool Education v.s. Home Possessions\nHome Possessions v.s. Vocational Training\nVocational Training v.s. School Education\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_school_education &lt;- cut(sum_school_education, breaks = 5, labels = FALSE)\nbin_home_possessions &lt;- cut(sum_home_possessions, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_school_education &lt;- as.factor(bin_school_education)\nbin_home_possessions &lt;- as.factor(bin_home_possessions)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_school_education, y = bin_home_possessions, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"School Education (Binned)\", y = \"Home Possessions (Binned)\", title = \"Heatmap of Total Average by Binned School Education and Home Possessions\") +\n  theme_minimal()\n\n\n\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_home_possessions &lt;- cut(sum_home_possessions, breaks = 5, labels = FALSE)\nbin_vocational_training &lt;- cut(sum_vocational_training, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_home_possessions &lt;- as.factor(bin_home_possessions)\nbin_vocational_training &lt;- as.factor(bin_vocational_training)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_home_possessions, y = bin_vocational_training, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"Home Possessions (Binned)\", y = \"Vocational Training (Binned)\", title = \"Heatmap of Total Average by Binned Home Possessions and Vocational Training\") +\n  theme_minimal()\n\n\n\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_vocational_training &lt;- cut(sum_vocational_training, breaks = 5, labels = FALSE)\nbin_school_education &lt;- cut(sum_school_education, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_vocational_training &lt;- as.factor(bin_vocational_training)\nbin_school_education &lt;- as.factor(bin_school_education)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_vocational_training, y = bin_school_education, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"Vocational Training (Binned)\", y = \"School Education (Binned)\", title = \"Heatmap of Total Average by Vocational Training and School Education\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nGenerally speaking, there is a positive correlation between home possessions and total average score given a certain level of education. Similarly, given a level of home possessions, there is a positive correlation between education and total average score. This is in line with our expectations.\nSome blank areas on the heatmap represent missing data.\nStudents whose parents have a medium level of home possessions but higher education have the highest average scores.\n\nTotal average score is related to arbitrary two of the three indexes.\n\n\nSocieconomic Status\nSchool Education\nHome Possessions\nVocational Training\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(socioeconomic_group = ntile(socioeconomic_status, 5))\n\n# Plot the density of total_avg scores for each socioeconomic group in a column layout\nggplot(combined, aes(x = Total_Avg, fill = factor(socioeconomic_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Socioeconomic Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Socioeconomic Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~socioeconomic_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(school_education_group = ntile(sum_school_education, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(school_education_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for School Education Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"School Education Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~school_education_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(home_possessions_group = ntile(sum_home_possessions, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(home_possessions_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Home Possessions Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Home Possessions Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~home_possessions_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(vocational_training_group = ntile(sum_vocational_training, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(vocational_training_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Vocational Training Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Vocational Training Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~vocational_training_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\n\nFrom level 1 to level 3, we see that as families have more money and resources, their children’s school scores usually get better. This improvement might be because these families can afford better learning materials, better schools, or more help with studies.\nHowever, once they reach a higher income level (level 3 to level 5), making even more money doesn’t seem to help the kids’ scores increase much further.\n\nThis suggests that after a certain point, just having more resources doesn’t continue to boost school performance in the same way."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Designing Graphs to Enlighten",
    "section": "",
    "text": "In this session, we dived into the fundamentals of designing impactful graphs and took our first steps into the world of Tableau.\nCheck out our learnings here."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\nexam_data &lt;- read.csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\nexam_data &lt;- read.csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n2 Beyond ggplot2 Annotation: ggrepel",
    "text": "2 Beyond ggplot2 Annotation: ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              linewidth = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n2.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n3 Beyond ggplot2 Themes",
    "text": "3 Beyond ggplot2 Themes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n3.1 Working with ggtheme package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n3.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n4 Beyond Single Graph",
    "text": "4 Beyond Single Graph\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\nNext\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n4.1 Combining two ggplot2 graphs\n\np1 + p2\n\n\n\n\n\n4.2 Combining three ggplot2 graphs\n\n(p1 / p2) | p3\n\n\n\n\n\n4.3 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n4.4 Creating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n4.5 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"../../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n2 Interactive Data Visualisation - ggiraph methods",
    "text": "2 Interactive Data Visualisation - ggiraph methods\n\n2.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package.\nNotice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n3 Interactivity",
    "text": "3 Interactivity\n\n3.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nClick to view the code.exam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---advanced",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---advanced",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n4 Interactivity - Advanced",
    "text": "4 Interactivity - Advanced\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n4.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nClick to view the code.tooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n4.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nClick to view the code.tooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n4.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n4.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n4.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n4.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\nClick to view the code.exam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n4.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\nClick to view the code.p1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n5 Interactive Data Visualisation - plotly methods!",
    "text": "5 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\n5.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nClick to view the code.plot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n5.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nClick to view the code.plot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n5.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n5.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nClick to view the code.d &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n6 Interactive Data Visualisation - crosstalk methods!",
    "text": "6 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n6.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n6.2 Linked brushing: crosstalk method\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nClick to view the code.d &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "\n2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KAI",
    "section": "",
    "text": "Welcome to Visual Analytics & Application Learning Journey webpage.\nIn this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nmutate_at()\nacross()\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nmutate_at()\nacross()\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "\n2 Animated Data Visualisation: gganimate methods",
    "text": "2 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n2.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nClick to view the code.ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n2.2 Building the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nClick to view the code.ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "\n3 Animated Data Visualisation: plotly",
    "text": "3 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n3.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\nClick to view the code.gg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nClick to view the code.gg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nClick to view the code.bp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  }
]