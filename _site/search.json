[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: Peer critique and DataVis Makeover",
    "section": "",
    "text": "This critique will evaluate a peer’s take-home exercise, specifically Take-home Exercise 1, focusing on clarity and aesthetics.\n\nThe original design will then be remade using data visualization design principles and best practices using ggplot2, its extensions, and tidyverse packages.\n\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse, haven, gridExtra, ggplot2, plotly, ggridges, cowplot)\n\n\nThe original dataset (Student questionnaire data file) was downloaded from PISA.\n\n\nData Loading and Filtering\nData Preparation\n\n\n\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\nRelated_math_read_scie_data &lt;- stu_qqq_SG %&gt;%\n  select(contains(c(\"ID\",\"ST004D01T\",\"math\", \"read\", \"scie\",\"ST259Q01JA\",\"ST259Q02JA\",\"ST005Q01JA\",\"ST007Q01JA\")))\nwrite_rds(Related_math_read_scie_data,\n          \"data/Related_math_read_scie_data.rds\")\n\n\n\n\nRelated_math_read_scie_data &lt;- \nread_rds(\"data/Related_math_read_scie_data.rds\")\n\n# Data about Maths/Read/Science\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvMATH = rowMeans(select(., ends_with(\"Math\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvREAD = rowMeans(select(., ends_with(\"READ\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvSCIE = rowMeans(select(., ends_with(\"SCIE\")), na.rm = TRUE))\n\n# Data about School\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvMATH_school = mean(avg_pvMATH, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvREAD_school = mean(avg_pvREAD, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvSCIE_school = mean(avg_pvSCIE, na.rm = TRUE))\n\n# Data about Socioeconomic Status\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(Parent_Edu_level = ST005Q01JA + ST007Q01JA)\n\ndf &lt;- Related_math_read_scie_data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home Exercise 2: Peer critique and DataVis Makeover",
    "section": "",
    "text": "This critique will evaluate a peer’s take-home exercise, specifically Take-home Exercise 1, focusing on clarity and aesthetics.\n\nThe original design will then be remade using data visualization design principles and best practices using ggplot2, its extensions, and tidyverse packages.\n\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse, haven, gridExtra, ggplot2, plotly, ggridges, cowplot)\n\n\nThe original dataset (Student questionnaire data file) was downloaded from PISA.\n\n\nData Loading and Filtering\nData Preparation\n\n\n\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\nRelated_math_read_scie_data &lt;- stu_qqq_SG %&gt;%\n  select(contains(c(\"ID\",\"ST004D01T\",\"math\", \"read\", \"scie\",\"ST259Q01JA\",\"ST259Q02JA\",\"ST005Q01JA\",\"ST007Q01JA\")))\nwrite_rds(Related_math_read_scie_data,\n          \"data/Related_math_read_scie_data.rds\")\n\n\n\n\nRelated_math_read_scie_data &lt;- \nread_rds(\"data/Related_math_read_scie_data.rds\")\n\n# Data about Maths/Read/Science\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvMATH = rowMeans(select(., ends_with(\"Math\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvREAD = rowMeans(select(., ends_with(\"READ\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvSCIE = rowMeans(select(., ends_with(\"SCIE\")), na.rm = TRUE))\n\n# Data about School\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvMATH_school = mean(avg_pvMATH, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvREAD_school = mean(avg_pvREAD, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvSCIE_school = mean(avg_pvSCIE, na.rm = TRUE))\n\n# Data about Socioeconomic Status\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(Parent_Edu_level = ST005Q01JA + ST007Q01JA)\n\ndf &lt;- Related_math_read_scie_data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-critique-and-remake",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-critique-and-remake",
    "title": "Take-home Exercise 2: Peer critique and DataVis Makeover",
    "section": "\n2 Visualization Critique and Remake",
    "text": "2 Visualization Critique and Remake\n\n2.1 Maths/Reading/Science Distributions\n\n2.1.1 Critique\nThree histograms are used to reveal the distribution of students’ maths, reading, and science score.\n\nClick to view the code.p1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvMATH)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvMATH), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvREAD)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvREAD), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvSCIE)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvSCIE), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np1 + p2 + p3 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Distributions of Maths/Reading/Science with Median Lines\", tag_levels = \"I\")\n\n\n\n\nClarity\n\nThe title and tag levels are clear and informative, providing a quick overview.\nMedian lines and annotations effectively emphasize the central tendency of each distribution, but the current positioning is relatively low, and in some cases, line overlap might hinder clarity.\nThe color contrast between elements enhances clarity.\nThe lack of consistent y-axis scaling across plots makes horizontal comparisons challenging.\n\nAesthetics\n\nThe color palette is visually appealing, with effective use of grey, black, and red.\nThe plot layout, combining three plots in a row, facilitates visual comparison.\nWell-balanced annotation placement avoids clutter and maintains readability.\n\n2.1.2 Remake\n\nClick to view the code.p1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, boundary = 100, color=\"black\", fill=\"skyblue\") +\n  geom_vline(aes(xintercept = median(avg_pvMATH)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvMATH), y = Inf, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\", x=\"Average Maths Score\", subtitle = \"Maths\") +\n  coord_cartesian(ylim = c(0,2000))\n\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, boundary = 100, color=\"black\", fill=\"skyblue\") +\n  geom_vline(aes(xintercept = median(avg_pvREAD)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvREAD), y = Inf, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\", x=\"Average Reading Score\", subtitle = \"Reading\") +\n  coord_cartesian(ylim = c(0,2000))\n\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, boundary = 100, color=\"black\", fill=\"skyblue\") +\n  geom_vline(aes(xintercept = median(avg_pvSCIE)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvSCIE), y = Inf, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\", x=\"Average Science Score\", subtitle = \"Science\") +\n  coord_cartesian(ylim = c(0,2000))\n\np1 + p2 + p3 +\n  plot_annotation(title = \"Distributions of Maths/Reading/Science with Median Lines\")\n\n\n\n\nClarity\n\nThe modification ensures a consistent y-axis range across all three plots. This improvement makes it easier to compare the distributions vertically, enhancing clarity.\nThe addition of subtitles (“Maths,” “Reading,” “Science”) provides clear identification for each plot, aiding interpretation.\n\nAesthetics\n\nAdjusting the positioning of annotations prevents overlap issues and ensures better visibility of median information.\nThe modification includes changing the color of the histogram bars to skyblue creating a distinct visual contrast with the grey background. This adjustment enhances visibility and makes the distribution of scores more apparent to the viewer.\n\n2.2 The Relationship between Gender and Performances\n\n2.2.1 Critique\nThree histograms are used to show the relationship between student’ gender and performances.\n\nClick to view the code.p4 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvMATH, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvMATH\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np5 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvREAD, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvREAD\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np6 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvSCIE, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvSCIE\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np4 + p5 + p6 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between Gender and Performances\", tag_levels = \"I\")\n\n\n\n\nClarity\n\nColoring the histograms based on the ‘Gender’ column effectively communicates the gender distribution. However, in this context, where ‘1’ represents girls and ‘2’ represents boys, the color assignment may be counterintuitive. For instance, the use of pink for boys and blue for girls might lead to potential misinterpretations.\nAdding a layer of transparency ensures that overlapping bars are easily distinguishable and enhances the clarity of the data presentation.\n\nAesthetics\n\nThe selection of a subdued grey color for histogram outlines maintains a clean and professional appearance. This choice enhances the visual appeal of the plots without distracting from the filled bars, contributing to a balanced aesthetic presentation.\nthe chosen color palette is aesthetically pleasing.\n\n2.2.2 Remake\n\nClick to view the code.p4 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvMATH, fill = factor(ST004D01T))) +\n  geom_density(alpha = 0.7, color = \"black\") +\n  labs(x = \"Average Maths Score\", y = \"Density\", fill = \"Gender\", subtitle = \"Maths\") +\n  scale_fill_manual(values = c(\"pink\", \"skyblue\")) +\n  coord_cartesian(xlim = c(150,830))\n\np5 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvREAD, fill = factor(ST004D01T))) +\n  geom_density(alpha = 0.7, color = \"black\") +\n  labs(x = \"Average Reading Score\", y = \"Density\", fill = \"Gender\", subtitle = \"Reading\") +\n  scale_fill_manual(values = c(\"pink\", \"skyblue\")) +\n  coord_cartesian(xlim = c(150,830))\n\np6 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvSCIE, fill = factor(ST004D01T))) +\n  geom_density(alpha = 0.7, color = \"black\") +\n  labs(x = \"Average Science Score\", y = \"Density\", fill = \"Gender\", subtitle = \"Science\") +\n  scale_fill_manual(values = c(\"pink\", \"skyblue\")) +\n  coord_cartesian(xlim = c(150,830))\n\nplot_grid(p4, p5, p6, ncol = 1, align = \"v\") +\n  plot_annotation(title = \"The Relationship between Gender and Performances\")\n\n\n\n\nClarity\n\nTransitioning from histograms to density plots provides a more intuitive representation of the smooth distribution of data, reducing potential interference from fluctuations in bar charts.\nAdding subtitles for each plot improves interpretability, providing specific context and contributing to a clearer understanding of the analysis.\n\nAesthetics\n\nAdjusting the color scheme to feature pink for girls (1) and sky blue for boys (2) enhances visual contrast, improving overall aesthetics and aiding in gender differentiation.\nAdopting a vertical layout and unifying the x-axis simplifies comparisons, resulting in a more cohesive and accessible exploration of the gender-performance relationship.\n\n2.3 The Relationship between School and Performances\n\n2.3.1 Critique\nThree scatter plots are used to depict the relationship between school and the average performance in Mathematics, Reading, and Science, respectively.\n\nClick to view the code.p7 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvMATH_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Maths\")\n\np8 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvREAD_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +\n  labs(x = \"School ID\", y = \"Average PV Read\")\n\np9 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvSCIE_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Scie\")\n\np7 + p8 + p9 +\n    plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between School and Performances\", tag_levels = \"I\")\n\n\n\n\nClarity\n\nThe scatter plots and accompanying regression lines effectively depict the relationship between school ID (CNTSCHID) and average performance scores.\nThe overlapping school IDs on the x-axis create difficulty in distinguishing individual data points, potentially hindering the clarity of the visual representation.\n\nAesthetics\n\nThe title provides a clear context for the visualizations.\nConsider exploring alternative visualizations, to present the relationship between school ID and performance without solely relying on regression lines. Given that school ID and performance may not exhibit a clear linear relationship, using different visualization techniques could offer a more nuanced and informative representation.\n\n2.3.2 Remake\n\nClick to view the code.# School Average Scores Recalculating\nSchool_Avg_Scores &lt;- Related_math_read_scie_data %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(avg_pvMATH, na.rm = TRUE),\n    Avg_Reading_Score = mean(avg_pvREAD, na.rm = TRUE),\n    Avg_Science_Score = mean(avg_pvSCIE, na.rm = TRUE)\n  )\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"))\n\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 2):(n())))\n\n# Boxplot Visualisation\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"skyblue\") +\n  geom_text_repel(data = outliers_data, aes(label = CNTSCHID), position = position_dodge(width = 1), box.padding = 0.8, force = 1, segment.color = \"grey50\", size = 1) + \n  labs(title = \"The Relationship between School and Performances\", x = \"\", y = \"Score\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\nClarity\n\nThe application of boxplot for visualization introduces a shift from previous scatter plots, offering a more effective means of comparing subject-wise performances.\nLabeling the top three and bottom two schools with the highest and lowest scores, respectively, enhances clarity by spotlighting significant outliers.\n\nAesthetics\n\nThe transition from scatter plots to box plots aligns with best practices for clearer representation and interpretation of the data.\nThe general arrangement is logical, and the boxplot is well-structured along the X-axis, creating a clear and organized chart that facilitates readability.\n\n2.4 The Relationship between Socioeconomic Status and Performances\n\n2.4.1 Critique\nA scatter plot with three regression lines is used to illustrate the relationship between socioeconomic status and the average performance scores in Mathematics, Reading, and Science.\n\nClick to view the code.df &lt;- Related_math_read_scie_data\n\nggplot(df, aes(x = Parent_Edu_level)) +\n  geom_point(aes(y = avg_pvMATH, color = \"Math\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvMATH, color = \"Math\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  geom_point(aes(y = avg_pvREAD, color = \"Read\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvREAD, color = \"Read\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  geom_point(aes(y = avg_pvSCIE, color = \"Science\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvSCIE, color = \"Science\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  labs(title = \"Relationship between Performance and Socioeconomic Status\",\n       x = \"Socioeconomic Status (Lower values indicate higher status)\",\n       y = \"Average PV Score\") +\n  scale_color_manual(values = c(\"Math\" = \"blue\", \"Read\" = \"green\", \"Science\" = \"red\")) +\n  theme_minimal()\n\n\n\n\nClarity\n\nThe plot lacks immediate clarity as the viewer may struggle to discern the primary purpose or key relationships at first glance.\nOverlapping points and regression lines in dense areas might reduce clarity.\n\nAesthetics\n\nThe color scheme, featuring blue for math, green for reading, and red for science, is visually appealing and helps differentiate the three aspects of academic performance.\nDue to the discrete nature of socioeconomic status, using points to represent the data may not be the most suitable choice, as it can lead to overlapping and a lack of clarity in distinguishing different levels of socioeconomic status.\n\n2.4.2 Remake\n\nClick to view the code.p10 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = factor(Parent_Edu_level), y = avg_pvMATH)) +\n  geom_boxplot(width = 0.5, fill = \"skyblue\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"Socioeconomic Status\", y = \"Average Maths Score\", subtitle = \"Maths\") +\n  theme_classic()\n\np11 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = factor(Parent_Edu_level), y = avg_pvREAD)) +\n  geom_boxplot(width = 0.5, fill = \"skyblue\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"Socioeconomic Status\", y = \"Average Reading Score\", subtitle = \"Reading\") +\n  theme_classic()\n\np12 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = factor(Parent_Edu_level), y = avg_pvSCIE)) +\n  geom_boxplot(width = 0.5, fill = \"skyblue\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"Socioeconomic Status\", y = \"Average Science Score\", subtitle = \"Science\") +\n  theme_classic()\n\np10 + p11 + p12 +\n  plot_annotation(title = \"The Relationship between Performance and Socioeconomic Status\n                                                                 (Lower values indicate higher status)\")\n\n\n\n\nClarity\n\nThe trio of plots effectively conveys the distribution of average scores across different socioeconomic status levels. The use of boxplots with median lines provides a clear representation of the central tendency and spread within each category.\nThe subtitles “Maths,” “Reading,” and “Science” help viewers quickly identify the subject matter of each plot, enhancing overall clarity.\nGrouping the plots together in a single arrangement allows for easy visual comparison across subjects, contributing to a coherent presentation.\n\nAesthetics\n\nThe choice of the sky-blue color for boxplots is aesthetically pleasing and maintains consistency across all three plots.\nThe red median lines stand out well against the blue background, aiding in the identification of central tendencies.\nThe overall design with classic themes is neat and professional, contributing to a visually appealing representation of the relationship between performance and socioeconomic status."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "title": "Take-home Exercise 2: Peer critique and DataVis Makeover",
    "section": "\n3 Learning Points",
    "text": "3 Learning Points\nTake-home exercise 2 served as a valuable reflection point for me, offering a different perspective on my classmates’ work in comparison to my own take-home exercise 1. This process allowed me to appreciate the diversity in design approaches and draw inspiration from their visualizations.\nOne key takeaway is the realization that there isn’t a singular correct method for designing visualizations. The crucial factors lie in ensuring clarity, aesthetic appeal, and the effective communication of a meaningful message. The act of revisiting my initial work alongside classmates’ contributions has been enlightening, providing me with fresh ideas for refining my take-home exercise 1.\nExamining my peers’ visualizations has not only expanded my understanding but has also enhanced my drawing skills. Witnessing different approaches has sparked new ideas and creativity within the realm of data visualization. This experience reinforced the notion that reassessing a problem, comprehending its origins, and amalgamating diverse perspectives can lead to an improved version of one’s work.\nIn essence, this process has been immensely beneficial, offering a deeper comprehension and hands-on practice in the art and science of data visualization."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KAI",
    "section": "",
    "text": "Welcome to Visual Analytics & Application Learning Journey webpage.\nIn this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Designing Graphs to Enlighten",
    "section": "",
    "text": "In this session, we dived into the fundamentals of designing impactful graphs and took our first steps into the world of Tableau.\nCheck out our learnings here."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nmutate_at()\nacross()\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nmutate_at()\nacross()\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"../../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "\n2 Animated Data Visualisation: gganimate methods",
    "text": "2 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n2.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nClick to view the code.ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n2.2 Building the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nClick to view the code.ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "\n3 Animated Data Visualisation: plotly",
    "text": "3 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n3.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\nClick to view the code.gg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nClick to view the code.gg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nClick to view the code.bp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\nexam_data &lt;- read.csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\nexam_data &lt;- read.csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n2 Beyond ggplot2 Annotation: ggrepel",
    "text": "2 Beyond ggplot2 Annotation: ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              linewidth = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n2.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n3 Beyond ggplot2 Themes",
    "text": "3 Beyond ggplot2 Themes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n3.1 Working with ggtheme package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n3.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "\n4 Beyond Single Graph",
    "text": "4 Beyond Single Graph\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\nNext\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x,\n              method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n4.1 Combining two ggplot2 graphs\n\np1 + p2\n\n\n\n\n\n4.2 Combining three ggplot2 graphs\n\n(p1 / p2) | p3\n\n\n\n\n\n4.3 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n4.4 Creating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n4.5 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"../../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nexam_data &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n2 Interactive Data Visualisation - ggiraph methods",
    "text": "2 Interactive Data Visualisation - ggiraph methods\n\n2.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package.\nNotice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n3 Interactivity",
    "text": "3 Interactivity\n\n3.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nClick to view the code.exam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---advanced",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---advanced",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n4 Interactivity - Advanced",
    "text": "4 Interactivity - Advanced\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n4.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nClick to view the code.tooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n4.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nClick to view the code.tooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n4.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS, tooltip = ID),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n4.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n4.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n4.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\nClick to view the code.exam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n4.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\nClick to view the code.p1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n5 Interactive Data Visualisation - plotly methods!",
    "text": "5 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\n5.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nClick to view the code.plot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n5.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nClick to view the code.plot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n5.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\nClick to view the code.p &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n5.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nClick to view the code.d &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "\n6 Interactive Data Visualisation - crosstalk methods!",
    "text": "6 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n6.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n6.2 Linked brushing: crosstalk method\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nClick to view the code.d &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "\n2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3: Interactivity in Visual Analytics",
    "section": "",
    "text": "Critic Figure 5.\n\nClick “here” to view the description of figure 5."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#short-quiz",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#short-quiz",
    "title": "In-class Exercise 3: Interactivity in Visual Analytics",
    "section": "",
    "text": "Critic Figure 5.\n\nClick “here” to view the description of figure 5."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "Despite claims of educational excellence in Singapore, skepticism persists, particularly regarding disparities in elite and neighborhood schools and socioeconomic factors. Leveraging 2022 PISA data, this project aims for a succinct Exploratory Data Analysis (EDA) using ggplot2 to reveal performance distribution and explore relationships with schools, gender, and socioeconomic status.\n\n\nDistribution Analysis: Use EDA methods and ggplot2 to visualize math, reading, and science performance distribution; Provide insights into score spread, addressing disparities.\nRelationship Exploration: Investigate academic performance relationships with school types using concise boxplots; Analyze gender-based differences with brief boxplots; Examine socioeconomic impact on academic outcomes, identifying correlations using boxplots.\nLimitations and Focus: Utilize up to five EDA visualizations for clarity; Deliver actionable insights for policymakers based on identified patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "Despite claims of educational excellence in Singapore, skepticism persists, particularly regarding disparities in elite and neighborhood schools and socioeconomic factors. Leveraging 2022 PISA data, this project aims for a succinct Exploratory Data Analysis (EDA) using ggplot2 to reveal performance distribution and explore relationships with schools, gender, and socioeconomic status.\n\n\nDistribution Analysis: Use EDA methods and ggplot2 to visualize math, reading, and science performance distribution; Provide insights into score spread, addressing disparities.\nRelationship Exploration: Investigate academic performance relationships with school types using concise boxplots; Analyze gender-based differences with brief boxplots; Examine socioeconomic impact on academic outcomes, identifying correlations using boxplots.\nLimitations and Focus: Utilize up to five EDA visualizations for clarity; Deliver actionable insights for policymakers based on identified patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "\n2 Data Preparation",
    "text": "2 Data Preparation\n\n2.1 Loading R packages\nThe code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nhaven: an R package designed for reading and writing datasets from software like SAS, SPSS, and Stata, into R.\ngridExtra: an R package that extends the grid graphics system.\nggplot2: a widely used R package for creating elegant and informative graphics using the Grammar of Graphics framework.\nplotly: an R package for interactive, web-based charts and dashboards, extending ggplot2 capabilities.\nggridges: an R package extending ggplot2 for concise and effective ridge plots.\n\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse, haven, gridExtra, ggplot2, plotly, ggridges)\n\n\n2.2 Dataset\nOne dataset (Student questionnaire data file) from PISA is provided for the task.\n\nstu_qqq &lt;- read_sas(\"../../data/cy08msp_stu_qqq.sas7bdat\")\n\n\n2.2.1 Data Filtering and Transformation\n\nFilter SGP students record\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nCreate new dataset including student’ performance in mathematics, reading, and science and relevant record of their schools, gender and socioeconomic status\n\n\n\nClick to view the code.mathematics &lt;- stu_qqq_SG[, c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")]\n\nreading &lt;- stu_qqq_SG[, c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")]\n\nscience &lt;- stu_qqq_SG[, c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")]\n\nschool &lt;- stu_qqq_SG[, c(\"CNTSCHID\")]\n\ngender &lt;- stu_qqq_SG[, c(\"ST004D01T\")]\n\nschool_education &lt;- stu_qqq_SG[, grep(\"ST005|ST007\", names(stu_qqq_SG), value = TRUE)]\n\nvocational_training &lt;- stu_qqq_SG[, grep(\"ST006|ST008\", names(stu_qqq_SG), value = TRUE)]\n\nhome_possessions &lt;- stu_qqq_SG[, grep(\"ST250|ST251|ST253|ST254|ST255|ST256\", names(stu_qqq_SG), value = TRUE)]\n\n\n\n2.2.2 Data Wrangling\n\n2.2.2.1 Calculate the mean and median for maths, reading, and science\nFor mean values, use the rowMeans function to calculate the average score for each student.\nFor median values, use the apply function to compute the median along rows (students).\nThen calculate the total sum of the average and the median scores for the three subjects for each student.\n\nClick to view the code.# Calculate mean values\nAvg_Math &lt;- rowMeans(mathematics, na.rm = TRUE)\nAvg_Reading &lt;- rowMeans(reading, na.rm = TRUE)\nAvg_Science &lt;- rowMeans(science, na.rm = TRUE)\n# Calculate total sum of mean\nTotal_Avg &lt;- rowSums(cbind(avg_math, avg_reading, avg_science), na.rm = TRUE)\n\n# Calculate median values\nMedian_Math &lt;- apply(mathematics, 1, median, na.rm = TRUE)\nMedian_Reading &lt;- apply(reading, 1, median, na.rm = TRUE)\nMedian_Science &lt;- apply(science, 1, median, na.rm = TRUE)\n# Calculate total sum of mean\nTotal_Median &lt;- rowSums(cbind(median_math, median_reading, median_science), na.rm = TRUE)\n\n\n\n2.2.2.2 Merge into a new table and save\n\nClick to view the code.# Create a new data frame\ncombined &lt;- cbind(stu_qqq_SG[\"CNTSTUID\"], Avg_Math, Avg_Reading, Avg_Science, Total_Avg, Median_Math, Median_Reading, Median_Science, Total_Median, school, gender, school_education, vocational_training, home_possessions)\n\ncolnames(combined)[colnames(combined) == \"CNTSCHID\"] &lt;- \"School\"\n\ncolnames(combined)[colnames(combined) == \"ST004D01T\"] &lt;- \"Gender\"\n\nwrite_rds(combined,\n          \"data/combined.rds\")\n\n\nRead the combined data and check for missing values\n\nClick to view the code.combined &lt;- read_rds(\"data/combined.rds\")\nhead(combined)\n\n\n\n  \n\n\nClick to view the code.any(is.na(combined))\n\n[1] TRUE\n\n\nAssigning names to variables\n\nClick to view the code.School &lt;- combined$School\n\nGender &lt;- combined$Gender\n\nschool_education &lt;- combined[, grep(\"ST005|ST007\", names(combined), value = TRUE)]\n\nvocational_training &lt;- combined[, grep(\"ST006|ST008\", names(combined), value = TRUE)]\n\nhome_possessions &lt;- combined[, grep(\"ST250|ST251|ST253|ST254|ST255|ST256\", names(combined), value = TRUE)]\n\n\n\n2.2.2.3 Calculate the socioeconomic status\n\nUse the rowSums function to calculate the sum of index of school education and vocational training for each students’ parents.\n\nClick to view the code.# Calculate sum values\nsum_school_education &lt;- rowSums(school_education, na.rm = TRUE)\nsum_vocational_training &lt;- rowSums(vocational_training, na.rm = TRUE)\n\n# Calculate sum of home possessions\nhome_possessions &lt;- home_possessions %&gt;%\n  mutate(sum_home_possessions = rowSums(select(., starts_with(\"ST251Q\"), -matches(\"ST251Q05JA|ST251Q08JA\")), na.rm = TRUE))\nsum_home_possessions &lt;- home_possessions$sum_home_possessions\n\n\nThen sum these aggregated values to calculate socioeconomic status for each student.\nCombining scores from school education, vocational training, and home possessions to calculate a person’s overall socioeconomic status makes sense because socioeconomic status is complex and includes things like education, job skills, and how much someone owns. This method creates a single score that shows a person’s level of education, job abilities, and quality of living, all of which are important parts of their financial and social status.\nSummation is straightforward and the results are easier to interpret. It can also handle zero values and matain scale consistency.\n\nsocioeconomic_status &lt;- rowSums(cbind(sum_school_education, sum_vocational_training, sum_home_possessions), na.rm = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratary-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratary-data-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "\n3 Exploratary Data Analysis",
    "text": "3 Exploratary Data Analysis\n\n3.1 Histograms for Distribution of Scores in Each Subject\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Calculate the median and mean outside of the ggplot2 aes function\nmedian_Avg_Math &lt;- median(combined$Avg_Math, na.rm = TRUE)\nmean_Avg_Math &lt;- mean(combined$Avg_Math, na.rm = TRUE)\n\nmedian_Avg_Reading &lt;- median(combined$Avg_Reading, na.rm = TRUE)\nmean_Avg_Reading &lt;- mean(combined$Avg_Reading, na.rm = TRUE)\n\nmedian_Avg_Science &lt;- median(combined$Avg_Science, na.rm = TRUE)\nmean_Avg_Science &lt;- mean(combined$Avg_Science, na.rm = TRUE)\n\n# Histogram for Avg_Math\np1 &lt;- ggplot(combined, aes(x = Avg_Math)) +\n  geom_histogram(bins = 20, fill = \"lightblue\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Math, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Math, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Math, y = Inf, label = paste(\"Median:\", round(median_Avg_Math, 2)), vjust = 2, hjust = -1.1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Math, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Math, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Math Scores\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\np2 &lt;- ggplot(combined, aes(x = Avg_Reading)) +\n  geom_histogram(bins = 20, fill = \"lightgreen\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Reading, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Reading, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Reading, y = Inf, label = paste(\"Median:\", round(median_Avg_Reading, 2)), vjust = 2, hjust = -1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Reading, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Reading, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Reading Scores\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\np3 &lt;- ggplot(combined, aes(x = Avg_Science)) +\n  geom_histogram(bins = 20, fill = \"lightcoral\", color = \"grey25\") +\n  geom_vline(xintercept = median_Avg_Science, color = \"blue\", linetype = \"dashed\") +\n  geom_vline(xintercept = mean_Avg_Science, color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median_Avg_Science, y = Inf, label = paste(\"Median:\", round(median_Avg_Science, 2)), vjust = 2, hjust = -1, color = \"blue\") +\n  annotate(\"text\", x = mean_Avg_Science, y = Inf, label = paste(\"Mean:\", round(mean_Avg_Science, 2)), vjust = 1, hjust = 1.5, color = \"red\") +\n  ggtitle(\"Histogram of Avg Science Scores\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"count\") +\n  theme_minimal()\n\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, \n             aes(x = Avg_Math)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, \n             aes(x = Avg_Reading)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Reading scores\") \n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, \n             aes(x = Avg_Science)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Science scores\") \n\n\n\n\n\n\n\n\nDistributions for math, reading, and science are bit left-skewed. This may due to that the assessments is challenging and more students are scoring towards the lower end.\nThe closeness of means to median indicates that while distributions are skewed, extreme low scores are not predominant.\nScore distributions are centrally peaked around 500-600. This indicates a standard performance level of the population.\n\nWe can further study the relationship between scores and some family economic status, gender, or schools.\n\n3.2 Performance Comparison by Gender\n‘1’ represents girls and ‘2’ represents boys in the ‘Gender’ column\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.combined$Gender &lt;- factor(Gender, levels = c(1, 2), labels = c(\"Girl\", \"Boy\"))\n\n# Density plot for Mathematics\np1 &lt;- ggplot(combined, aes(x = Avg_Math, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Math Scores by Gender\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Density plot for Reading\np2 &lt;- ggplot(combined, aes(x = Avg_Reading, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Reading Scores by Gender\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Density plot for Science\np3 &lt;- ggplot(combined, aes(x = Avg_Science, fill = Gender)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Density Plot of Avg Science Scores by Gender\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n# Combining the plots into one image for easy comparison\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Math, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Math Scores by Gender\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Reading, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Reading Scores by Gender\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\nClick to view the code.ggplot(data = combined, aes(x = Avg_Science, color = Gender)) +\n  geom_line(stat = \"density\", size = 1, aes(y = after_stat(density)), alpha = 0.5) +\n  ggtitle(\"Distribution of Science Scores by Gender\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Density\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Girl\" = \"pink\", \"Boy\" = \"slateblue\"))\n\n\n\n\n\n\n\n\nIn math and science, the peak of the boys’ density curve is slightly to the right of the girls’. This indicates that boys tend to have higher average scores in math and science.\nFor reading, the peak of the girls’ density curve is to the right of the boys’. This means that girls have better performance in reading compared with boys.\nHowever, the curves overlap significantly across all subjects. This shows that the difference in gender is not so significant as expected.\n\nThe discovery conform to peoples common sense, although the difference in gender is not so large.\n\n3.3 Performance Comparison by School\n\n\n3 subjects\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Scatter plot for Avg Math Score vs School ID\np1 &lt;- ggplot(combined, aes(x = School, y = Avg_Math)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Math Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Math Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Scatter plot for Avg Reading Score vs School ID\np2 &lt;- ggplot(combined, aes(x = School, y = Avg_Reading)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Reading Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Reading Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Scatter plot for Avg Science Score vs School ID\np3 &lt;- ggplot(combined, aes(x = School, y = Avg_Science)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Science Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Science Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Plotting all three scatter plots in a grid for comparison\ngrid.arrange(p1, p2, p3, ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Math)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Math Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Math Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Reading)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Reading Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Reading Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nClick to view the code.ggplot(data=combined, aes(x = School, y = Avg_Science)) +\n  geom_point(aes(color = School), alpha = 0.6) +\n  ggtitle(\"Scatter Plot of Avg Science Scores by School ID\") +\n  xlab(\"School ID\") +\n  ylab(\"Average Science Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe first set of scatter plots shows a wide distribution of average scores across schools, with no clear pattern based on school ID.\n\n\n\nPairwise Comparison\nMathematics\nReading\nScience\n\n\n\n\nClick to view the code.# Compute the average of average scores for each school\nschool_avg_scores &lt;- combined %&gt;%\n  group_by(School) %&gt;%\n  summarise(\n    Avg_Math_Score = mean(Avg_Math, na.rm = TRUE),\n    Avg_Reading_Score = mean(Avg_Reading, na.rm = TRUE),\n    Avg_Science_Score = mean(Avg_Science, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Scatter plot for Average Math vs. Average Reading Scores for each School\np_math_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Math vs. Reading\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Math vs. Average Science Scores for each School\np_math_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Math vs. Science\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Math Scores for each School\np_reading_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), color = \"coral\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Reading vs. Math\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Science Scores for each School\np_reading_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), color = \"coral\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Reading vs. Science\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Math Scores for each School\np_science_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), color = \"firebrick\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Science vs. Math\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Reading Scores for each School\np_science_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), color = \"firebrick\", alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Science vs. Reading\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_math_reading, p_reading_math, p_science_math, p_math_science, p_reading_science, p_science_reading, ncol = 3, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Math vs. Average Reading Scores for each school\np_math_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Math vs. Average Reading Scores by School\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Math vs. Average Science Scores for each School\np_math_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Math_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Math vs. Average Science Scores by School\") +\n  xlab(\"Average Math Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_math_reading, p_math_science, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Reading vs. Average Math Scores for each School\np_reading_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Reading vs. Average Math Scores by School\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Reading vs. Average Science Scores for each School\np_reading_science &lt;- ggplot(school_avg_scores, aes(x = Avg_Reading_Score, y = Avg_Science_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Reading vs. Average Science Scores by School\") +\n  xlab(\"Average Reading Score\") +\n  ylab(\"Average Science Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_reading_math, p_reading_science, nrow = 2)\n\n\n\n\n\n\n\nClick to view the code.# Scatter plot for Average Science vs. Average Math Scores for each School\np_science_math &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Math_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Science vs. Average Math Scores by School\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Math Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Scatter plot for Average Science vs. Average Reading Scores for each School\np_science_reading &lt;- ggplot(school_avg_scores, aes(x = Avg_Science_Score, y = Avg_Reading_Score)) +\n  geom_point(aes(color = School), alpha = 0.7) +\n  geom_smooth(formula = 'y ~ x', method = lm, color = \"black\", linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Average Science vs. Average Reading Scores by School\") +\n  xlab(\"Average Science Score\") +\n  ylab(\"Average Reading Score\") +\n  theme(legend.position = \"none\")  # Omitting the legend for clarity\n\n# Plotting both scatter plots\ngridExtra::grid.arrange(p_science_math, p_science_reading, nrow = 2)\n\n\n\n\n\n\n\n\nThe second set of plots fixes School ID and try to compare scores of different subjects within each School. These plots reveal a strong positive correlation between average scores across all subjects, indicating that Schools with high performance in one subject tend to perform well in others too.\n\nThis suggests that factors influencing School performance may be systemic rather than subject specific. Schools with higher performance on a specific subject also performs well on other subjects.\n\n3.4 Performance Comparison by Socioeconomic Status\nConstructing pairwise heatmap plots for home possessions, education level, and vocational training level, vesus the total average score.\n\n\nSchool Education v.s. Home Possessions\nHome Possessions v.s. Vocational Training\nVocational Training v.s. School Education\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_school_education &lt;- cut(sum_school_education, breaks = 5, labels = FALSE)\nbin_home_possessions &lt;- cut(sum_home_possessions, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_school_education &lt;- as.factor(bin_school_education)\nbin_home_possessions &lt;- as.factor(bin_home_possessions)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_school_education, y = bin_home_possessions, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"School Education (Binned)\", y = \"Home Possessions (Binned)\", title = \"Heatmap of Total Average by Binned School Education and Home Possessions\") +\n  theme_minimal()\n\n\n\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_home_possessions &lt;- cut(sum_home_possessions, breaks = 5, labels = FALSE)\nbin_vocational_training &lt;- cut(sum_vocational_training, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_home_possessions &lt;- as.factor(bin_home_possessions)\nbin_vocational_training &lt;- as.factor(bin_vocational_training)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_home_possessions, y = bin_vocational_training, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"Home Possessions (Binned)\", y = \"Vocational Training (Binned)\", title = \"Heatmap of Total Average by Binned Home Possessions and Vocational Training\") +\n  theme_minimal()\n\n\n\n\n\n\n\nClick to view the code.# Binning numeric variables\nbin_vocational_training &lt;- cut(sum_vocational_training, breaks = 5, labels = FALSE)\nbin_school_education &lt;- cut(sum_school_education, breaks = 5, labels = FALSE)\n\n# Converting the bins to factor\nbin_vocational_training &lt;- as.factor(bin_vocational_training)\nbin_school_education &lt;- as.factor(bin_school_education)\n\n# Creating the heatmap\nggplot(combined, aes(x = bin_vocational_training, y = bin_school_education, fill = Total_Avg)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"lightcoral\") +\n  labs(x = \"Vocational Training (Binned)\", y = \"School Education (Binned)\", title = \"Heatmap of Total Average by Vocational Training and School Education\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nGenerally speaking, there is a positive correlation between home possessions and total average score given a certain level of education. Similarly, given a level of home possessions, there is a positive correlation between education and total average score. This is in line with our expectations.\nSome blank areas on the heatmap represent missing data.\nStudents whose parents have a medium level of home possessions but higher education have the highest average scores.\n\nTotal average score is related to arbitrary two of the three indexes.\n\n\nSocieconomic Status\nSchool Education\nHome Possessions\nVocational Training\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(socioeconomic_group = ntile(socioeconomic_status, 5))\n\n# Plot the density of total_avg scores for each socioeconomic group in a column layout\nggplot(combined, aes(x = Total_Avg, fill = factor(socioeconomic_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Socioeconomic Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Socioeconomic Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~socioeconomic_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(school_education_group = ntile(sum_school_education, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(school_education_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for School Education Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"School Education Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~school_education_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(home_possessions_group = ntile(sum_home_possessions, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(home_possessions_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Home Possessions Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Home Possessions Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~home_possessions_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\nClick to view the code.combined &lt;- combined %&gt;%\n  mutate(vocational_training_group = ntile(sum_vocational_training, 5))\n\nggplot(combined, aes(x = Total_Avg, fill = factor(vocational_training_group))) + \n  geom_density(alpha = 0.5, color = \"white\", size = 0.5) + \n  labs(title = \"Density of Total Average Scores for Vocational Training Groups\", \n       x = \"Total Average Score\", \n       y = \"Density\",\n       fill = \"Vocational Training Group\") + \n  theme_minimal() +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),) +\n  facet_wrap(~vocational_training_group, scales = \"free_y\", ncol = 1)\n\n\n\n\n\n\n\n\nFrom level 1 to level 3, we see that as families have more money and resources, their children’s school scores usually get better. This improvement might be because these families can afford better learning materials, better schools, or more help with studies.\nHowever, once they reach a higher income level (level 3 to level 5), making even more money doesn’t seem to help the kids’ scores increase much further.\n\nThis suggests that after a certain point, just having more resources doesn’t continue to boost school performance in the same way."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#tableau",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#tableau",
    "title": "In-class Exercise 3: Interactivity in Visual Analytics",
    "section": "2 Tableau",
    "text": "2 Tableau\nLearning how to create interactive reports and storytelling with Tableau."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "tidyverse, a family of R packages for data science process.\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots.\nggdist for visualising distribution and uncertainty..\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#getting-started",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "tidyverse, a family of R packages for data science process.\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots.\nggdist for visualising distribution and uncertainty..\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "\n2 Visualising Distribution with Ridgeline Plot",
    "text": "2 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n2.1 Plotting ridgeline graph: ggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nClick to view the code.ggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n2.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nClick to view the code.ggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Student_Score\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n2.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\nClick to view the code.ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n2.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nClick to view the code.ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nClick to view the code.ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "\n3 Visualising Distribution with Raincloud Plot",
    "text": "3 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n3.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nClick to view the code.ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n3.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nClick to view the code.ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n3.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nClick to view the code.ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n3.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nClick to view the code.ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "",
    "text": "pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"../../data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nClick to view the code.set.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nClick to view the code.ggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nClick to view the code.ggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nClick to view the code.ggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nClick to view the code.exam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nClick to view the code.ggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk, DT, ggdist, ggridges, colorspace, gganimate, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#getting-started",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "",
    "text": "pacman::p_load(ggstatsplot, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nClick to view the code.set.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nClick to view the code.ggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nClick to view the code.set.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nClick to view the code.ggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nClick to view the code.ggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nClick to view the code.ggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nClick to view the code.exam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nClick to view the code.ggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visualising-models",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "\n2 Visualising Models",
    "text": "2 Visualising Models\nLearning how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\n2.1 Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n2.2 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\nClick to view the code.car_resale &lt;- read_xls(\"../../data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\n\n2.3 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nClick to view the code.model &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n2.4 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\nClick to view the code.check_collinearity(model)\n\n\n\n  \n\n\n\n\nClick to view the code.check_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n2.5 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nClick to view the code.model1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n2.6 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\nClick to view the code.check_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n2.7 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\nClick to view the code.check_model(model1)\n\n\n\n\n\n2.8 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nClick to view the code.plot(parameters(model1))\n\n\n\n\n\n2.9 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nClick to view the code.ggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#getting-started",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk, DT, ggdist, ggridges, colorspace, gganimate, tidyverse)\n\n\n\nexam &lt;- read_csv(\"../../data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "\n2 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "2 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nClick to view the code.my_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nClick to view the code.knitr::kable(head(my_sum), format = 'html')\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n2.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nClick to view the code.ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n2.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nClick to view the code.ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n2.3 Visualizing the uncertainty of point estimates with interactive error bars\nLearning how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nClick to view the code.shared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "\n3 Visualising Uncertainty: ggdist package",
    "text": "3 Visualising Uncertainty: ggdist package\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n3.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nClick to view the code.exam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\nwidth = 0.95\npoint = median\ninterval = qi\n\n\nClick to view the code.exam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n3.2 Visualizing the uncertainty of point estimates: ggdist methods\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\nClick to view the code.exam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\nClick to view the code.exam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99),\n    .point = median,\n    .interval = qi\n  ) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\"\n  )\n\n\n\n\n\n3.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nClick to view the code.exam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n3.4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nlibrary(ungeviz)\n\n\nClick to view the code.ggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n3.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nClick to view the code.ggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#getting-started",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "",
    "text": "pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"../../data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "\n2 FunnelPlotR methods",
    "text": "2 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n2.1 FunnelPlotR methods: The basic plot\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\nClick to view the code.funnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n2.2 FunnelPlotR methods: Makeover 1\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\nClick to view the code.funnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n2.3 FunnelPlotR methods: Makeover 2\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\nClick to view the code.funnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "\n3 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "3 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nBuilding funnel plots step-by-step by using ggplot2.\nEnhancing working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n3.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\nClick to view the code.df &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\nClick to view the code.fit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n3.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nClick to view the code.number.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n3.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\nClick to view the code.p &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n3.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nClick to view the code.fp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "title": "Hands-on Exercise 5.1: Building Ternary Plot with R",
    "section": "",
    "text": "ggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load('plotly', 'tidyverse', 'ggtern')\n# require(devtools)\n# install_version(\"ggtern\", version = \"3.4.1\", repos = \"http://cran.us.r-project.org\")\n# library(ggtern)\n\n\n\npop_data &lt;- read_csv(\"../../data/respopagsex2000to2018_tidy.csv\") \n\n\nUsing the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\nClick to view the code.#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#getting-started",
    "title": "Hands-on Exercise 5.1: Building Ternary Plot with R",
    "section": "",
    "text": "ggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load('plotly', 'tidyverse', 'ggtern')\n# require(devtools)\n# install_version(\"ggtern\", version = \"3.4.1\", repos = \"http://cran.us.r-project.org\")\n# library(ggtern)\n\n\n\npop_data &lt;- read_csv(\"../../data/respopagsex2000to2018_tidy.csv\") \n\n\nUsing the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\nClick to view the code.#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "pacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nwh &lt;- read_csv(\"../../data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#getting-started",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "pacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nwh &lt;- read_csv(\"../../data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "pacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nwine &lt;- read_csv(\"../../data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "pacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nwine &lt;- read_csv(\"../../data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "title": "Hands-on Exercise 5.3: Visual Multivariate Analysis with Heatmap",
    "section": "",
    "text": "pacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nwh &lt;- read_csv(\"../../data/WHData-2018.csv\")\n\n\nChange the rows by country name instead of row number by using the code chunk below.\nNotice that the row number has been replaced into the country name.\nrow.names(wh) &lt;- wh$Country\n\nThe data was loaded into a data frame, but it has to be a data matrix to make the heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nClick to view the code.wh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#getting-started",
    "title": "Hands-on Exercise 5.3: Visual Multivariate Analysis with Heatmap",
    "section": "",
    "text": "pacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nwh &lt;- read_csv(\"../../data/WHData-2018.csv\")\n\n\nChange the rows by country name instead of row number by using the code chunk below.\nNotice that the row number has been replaced into the country name.\nrow.names(wh) &lt;- wh$Country\n\nThe data was loaded into a data frame, but it has to be a data matrix to make the heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nClick to view the code.wh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse) \n\n\n\nrealis2018 &lt;- read_csv(\"../../data/realis2018.csv\")\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\nClick to view the code.realis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%\n\nClick to view the code.realis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#getting-started",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse) \n\n\n\nrealis2018 &lt;- read_csv(\"../../data/realis2018.csv\")\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\nClick to view the code.realis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%\n\nClick to view the code.realis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 5.1: Building Ternary Plot with R",
    "section": "\n2 Plotting Ternary Diagram with R",
    "text": "2 Plotting Ternary Diagram with R\n\n2.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\nClick to view the code.#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\nClick to view the code.#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n2.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\nClick to view the code.# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "\n2 Building Correlation Matrix: pairs() method",
    "text": "2 Building Correlation Matrix: pairs() method\nReading the syntax description of pairs function.\n\n2.1 Building a basic correlation matrix\n\nClick to view the code.pairs(wine[,1:11])\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function.\nColumns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\nClick to view the code.pairs(wine[,2:12])\n\n\n\n\n\n\n\n\n2.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\nClick to view the code.pairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\nSimilarly, the upper half of the correlation matrix can be displayed by the code chunk below.\n\nClick to view the code.pairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n2.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\nClick to view the code.panel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "\n3 Visualising Correlation Matrix: ggcormat()",
    "text": "3 Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\n\n3.1 The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nClick to view the code.ggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\nClick to view the code.ggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-multiple-plots",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "\n4 Building multiple plots",
    "text": "4 Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\nClick to view the code.grouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "\n5 Visualising Correlation Matrix using corrplot Package",
    "text": "5 Visualising Correlation Matrix using corrplot Package\nReading An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\n5.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nClick to view the code.wine.cor &lt;- cor(wine[, 1:11])\n\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\nClick to view the code.corrplot(wine.cor)\n\n\n\n\n\n\n\n\ncircle: default visual object used to plot the corrgram\ndefault layout of the corrgram: symmetric matrix\n\ndefault colour scheme - diverging blue-red\nblue - represent pair variables with positive correlation coefficients\nred - represent pair variables with negative correlation coefficients\n\n\nthe intensity of the colour (saturation) - represent the strength of the correlation coefficient\ndarker - relatively stronger linear relationship between the paired variables\nlighter - relatively weaker linear relationship\n\n\n5.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle.\nAs shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nsquare\nellipse\n\n\n\n\nClick to view the code.corrplot(wine.cor, method = \"square\") \n\n\n\n\n\n\n\n\n\n\nClick to view the code.corrplot(wine.cor, method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\n\n5.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\nClick to view the code.corrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\nClick to view the code.corrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n5.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\nClick to view the code.corrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n5.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.’\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nClick to view the code.wine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\nClick to view the code.corrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n5.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\nClick to view the code.corrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n5.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\nClick to view the code.corrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#static-heatmap",
    "title": "Hands-on Exercise 5.3: Visual Multivariate Analysis with Heatmap",
    "section": "\n2 Static Heatmap",
    "text": "2 Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nLearning how to plot static heatmaps by using heatmap() of R Stats package.\n\nClick to view the code.wh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nClick to view the code.wh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nClick to view the code.wh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#creating-interactive-heatmap",
    "title": "Hands-on Exercise 5.3: Visual Multivariate Analysis with Heatmap",
    "section": "\n3 Creating Interactive Heatmap",
    "text": "3 Creating Interactive Heatmap\n\n3.1 Working with heatmaply\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\n\nClick to view the code.heatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nClick to view the code.heatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n3.2 Data transformation\n\n3.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nClick to view the code.heatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n3.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n3.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nClick to view the code.heatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n3.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\n\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\n\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\n\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n3.4 Manual approach\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n3.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nClick to view the code.wh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  \n\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nClick to view the code.wh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n3.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n3.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n3.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\n\nk_row is used to produce 5 groups.\n\nmargins is used to change the top margin to 60 and row margin to 200.\n\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\n\nmain is used to write the main title of the plot.\n\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nClick to view the code.heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4: Fundamentals of Visual Analytics",
    "section": "",
    "text": "View the slides to learn more about:\n\nVisual Analytics for Knowledge Discovery\nVisual Analytics Approach for Statistical Testing\nVisual Analytics for Building Better Models\nVisualising Uncertainty\nVariation and Its Discontents"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "\n3 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "3 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n3.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nClick to view the code.wh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n3.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\nClick to view the code.parallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n3.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\nClick to view the code.parallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n3.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nClick to view the code.histoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "\n2 Plotting Static Parallel Coordinates Plot",
    "text": "2 Plotting Static Parallel Coordinates Plot\n\n2.1 Plotting a simple parallel coordinates\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n2.2 Plotting a parallel coordinates with boxplot\n\nClick to view the code.ggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n2.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nClick to view the code.ggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n2.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nClick to view the code.ggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n2.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nClick to view the code.ggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "\n2 Designing Treemap with treemap Package",
    "text": "2 Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n2.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nClick to view the code.realis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n2.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\n\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n2.3 Working with vColor and type arguments\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n2.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n2.5 The “value” type treemap\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n2.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n2.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n2.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n2.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\nClick to view the code.treemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "\n3 Designing Treemap using treemapify Package",
    "text": "3 Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n3.1 Designing a basic treemap\n\nClick to view the code.ggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n3.2 Defining hierarchy\n\n3.2.1 Group by Planning Region\n\nClick to view the code.ggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\n3.2.2 Group by Planning Area\n\nClick to view the code.ggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\n3.2.3 Adding boundary line\n\nClick to view the code.ggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "\n4 Designing Interactive Treemap using d3treeR",
    "text": "4 Designing Interactive Treemap using d3treeR\n\n4.1 Installing d3treeR package\n\n#install.packages(\"devtools\")\nlibrary(devtools)\n\n\n#install_github(\"timelyportfolio/d3treeR\")\nlibrary(d3treeR)\n\n\n4.2 Designing An Interactive Treemap - Step1\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\nClick to view the code.tm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n4.3 Designing An Interactive Treemap - Step2\nThen d3tree() is used to build an interactive treemap.\n\nClick to view the code.d3tree(tm,rootname = \"Singapore\" )"
  }
]